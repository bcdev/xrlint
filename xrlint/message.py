from dataclasses import dataclass
from typing import Literal

from xrlint.util.todict import ToDictMixin


@dataclass(frozen=True, kw_only=True)
class EditInfo(ToDictMixin):
    """Not used yet."""


@dataclass(frozen=True, kw_only=True)
class Suggestion(ToDictMixin):
    desc: str
    """Description of the suggestion."""

    data: dict[str, None] | None = None
    """Data that can be referenced in the description."""

    fix: EditInfo | None = None
    """Not used yet."""


@dataclass(kw_only=True)
class Message(ToDictMixin):
    message: str
    """The error message."""

    node_path: str | None = None
    """Node path within the dataset.
    This property is None if the message does not 
    apply to a certain dataset node.
    """

    rule_id: str | None = None
    """The rule name that generated this lint message. 
    If this message is generated by the xrlint core 
    rather than rules, this is None.
    """

    severity: Literal[1, 2] | None = None
    """The severity of this message. 
    `1` means warning and `2` means error.
    """

    fatal: bool | None = None
    """True if this is a fatal error unrelated to a rule, 
    like a parsing error.
    """

    fix: EditInfo | None = None
    """The EditInfo object of autofix. 
    This property is None if this 
    message is not fixable.
    
    Not used yet.
    """

    suggestions: list[Suggestion] | None = None
    """The list of suggestions. Each suggestion is the pair 
    of a description and an EditInfo object to fix the dataset. 
    API users such as editor integrations can choose one of them 
    to fix the problem of this message. 
    This property is None if this message does not have any suggestions.
    """
